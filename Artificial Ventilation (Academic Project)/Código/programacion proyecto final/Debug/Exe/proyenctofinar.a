;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <glcd.h>
;#include <stdio.h>
;#include <string.h>
;#include <stdlib.h>
;#include <font5x7.h>
;
;
;//*******************************************************************************************************
;//************************************VARIABLES GLOBALES*************************************************
;//*******************************************************************************************************
;
;unsigned int Presion=0.0, vel=0.0;
;unsigned int clickencoder=0, count1=0, count2=0, count3=0;
;int estado=0, rpm_max=0, pres_max_glob=0, tiempo_ins_glob=0, tiempo_espera=0, presion_PEEP=0, presion_ins=0, presion_esp ...
;
;
;
;//*******************************************************************************************************
;//*******************************INTERRUPICON EXTERNA PARA LECTURA DE ENCODER****************************
;//*******************************************************************************************************
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0018 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0019 clickencoder++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001A // Place your code here
; 0000 001B 
; 0000 001C }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;//*******************************************************************************************************
;//****************************************USART**********************************************************
;//*******************************************************************************************************
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 003C {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003D char status,data;
; 0000 003E status=UCSRA;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003F data=UDR;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0040 //----------------------------------------------------------------------------------------------------
; 0000 0041 
; 0000 0042 //aqui va el codigo
; 0000 0043 
; 0000 0044 //---------------------------------------------------------------------------------------------------
; 0000 0045 
; 0000 0046 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0047    {
; 0000 0048    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0049 #if RX_BUFFER_SIZE == 256
; 0000 004A    // special case for receiver buffer size=256
; 0000 004B    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 004C #else
; 0000 004D    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 004E    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004F       {
; 0000 0050       rx_counter=0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0051       rx_buffer_overflow=1;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0052       }
; 0000 0053 #endif
; 0000 0054    }
;PCODE: $00000037 VOL: 0
; 0000 0055 }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 005C {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 005D char data;
; 0000 005E while (rx_counter==0);
;PCODE: $0000003F VOL: 0
;	data -> R17
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005F data=rx_buffer[rx_rd_index++];
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0060 #if RX_BUFFER_SIZE != 256
; 0000 0061 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0062 #endif
; 0000 0063 #asm("cli")
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
	cli
;PCODE: $00000054 VOL: 0
; 0000 0064 --rx_counter;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0065 #asm("sei")
;PCODE: $00000058 VOL: 0
	sei
;PCODE: $00000059 VOL: 0
; 0000 0066 return data;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0067 }
;PCODE: $0000005D VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;
;
;//*******************************************************************************************************
;//********************************INTERRUPCIÓN POR OVEWRFLOW DE TIMER 0, CRONOMETROS*********************
;//*******************************************************************************************************
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0072 {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0073 // Reinitialize Timer 0 value
; 0000 0074 TCNT0=0xB2;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0075  count1++;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0076  count2++;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0077 // Place your code here
; 0000 0078 if(count1 == 50)
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0079 {
; 0000 007A  vel = clickencoder*5;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 007B  clickencoder=0;
;PCODE: $0000006F VOL: 0
; 0000 007C  count1=0;
;PCODE: $00000070 VOL: 0
; 0000 007D }
; 0000 007E if(count2 == 10){ count3++; count2=0;}
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 007F 
; 0000 0080 }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0087 {
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0088 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000080 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0089 // Delay needed for the stabilization of the ADC input voltage
; 0000 008A delay_us(10);
;PCODE: $00000084 VOL: 0
; 0000 008B // Start the AD conversion
; 0000 008C ADCSRA|=(1<<ADSC);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 008D // Wait for the AD conversion to complete
; 0000 008E while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 008F ADCSRA|=(1<<ADIF);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0090 return ADCW;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0091 }
;PCODE: $00000092 VOL: 0
;//********************************************************************************************************************** ...
;//************************************FUNCIONES DE ENTRADA/SALIDA******************************************************* ...
;//********************************************************************************************************************** ...
;void Speed_Control (unsigned char PWM)   //***********CONTROL DE VELOCIDAD DE MOTOR
; 0000 0096 {
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0097 OCR1A = PWM;
;PCODE: $00000095 VOL: 0
;	PWM -> Y+0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0098 }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;
;//********************************************************************************************************************** ...
;void Display_Data (unsigned int RPM, unsigned int PRES, int STATE,int etapa)                                  //******** ...
; 0000 009C {                                                                                                             //******** ...
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 009D char texto1[12], texto2[12], texto3[12], texto4[12], texto5[12];                                              //******** ...
; 0000 009E                                                                                                               //******** ...
; 0000 009F if(STATE == 1){        sprintf(texto1,"Activo"); }   //****************                                       //******** ...
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;	RPM -> Y+66
;	PRES -> Y+64
;	STATE -> Y+62
;	etapa -> Y+60
;	texto1 -> Y+48
;	texto2 -> Y+36
;	texto3 -> Y+24
;	texto4 -> Y+12
;	texto5 -> Y+0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00A0 else{                  sprintf(texto1,"Espera");}    //****************                                       //******** ...
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00A1 if(etapa == 0){        sprintf(texto2,"(OFF)"); }    //****************Determinación de mensaje de            //******** ...
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00A2 if(etapa == 1){        sprintf(texto2,"(Ins)"); }    //****************acuerdo a estado y etapa               //******** ...
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00A3 if(etapa == 2){        sprintf(texto2,"(Esp)"); }    //****************                                       //******** ...
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00A4 if(etapa == 3){        sprintf(texto2,"(Peep)"); }   //****************                                       //******** ...
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00A5                                                                                                               //******** ...
; 0000 00A6 sprintf(texto3,"Presion: %d",(unsigned int)PRES);    //****************                                       //******** ...
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00A7 sprintf(texto4,"Vel: %d",RPM);                       //**************** Creación de strings                   //******** ...
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00A8 sprintf(texto5,"T: %d",(int)tiempo_espera);        //****************                                       //********** ...
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00A9 glcd_clear();                                                                                                            ...
;PCODE: $00000110 VOL: 0
; 0000 00AA glcd_moveto(8,0);   glcd_outtext("Estado:");   //****************                                             //******** ...
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00AB glcd_moveto(8,10);  glcd_outtext(texto1);      //****************                                             //******** ...
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00AC glcd_moveto(45,10); glcd_outtext(texto2);      //****************  Coordenadas y escritura en LCD             //******** ...
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00AD glcd_moveto(8,20);  glcd_outtext(texto3);      //****************                                             //******** ...
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00AE glcd_moveto(8,30);  glcd_outtext(texto4);      //****************                                             //******** ...
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00AF glcd_moveto(8,40);  glcd_outtext(texto5);      //****************                                             //******** ...
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00B0 }                                                                                                             //******** ...
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0

	.DSEG
_0x15:
	.BYTE 0x8
;//********************************************************************************************************************** ...
;
;
;//******************************************************************************************
;unsigned int leer_presion(void){                                          //****************
; 0000 00B5 unsigned int leer_presion(void){

	.CSEG
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00B6 Presion=read_adc(0);                                                      //****************
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00B7 //Presion=(Presion*0.488*0.222)+9.3;  /*0.488*0.222*0.01%3d*/             //**************** LECTURA DE SENSOR DE PRESIÓ ...
; 0000 00B8 Presion=(Presion*0.488*0.222)+9.3;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00B9 return Presion;                                                           //****************
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00BA }                                                                         //****************
;PCODE: $0000014A VOL: 0
;//******************************************************************************************
;
;//********************************************************************************************************************** ...
;void LeerConfig (void)                                                                                                   ...
; 0000 00BF {
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00C0                                                                                                                       // ...
; 0000 00C1 int i=1;                                                                                                                 ...
; 0000 00C2 char mensajeconfig[70];                                                                                                  ...
; 0000 00C3 //char mensajeconfig[70]="           01,255,080,50,20,536          ";    //*************** Mensaje de prueba             ...
; 0000 00C4 char* salida[7];                                                                                                         ...
; 0000 00C5 char* token;                                                                                                             ...
; 0000 00C6 printf("en espera");                                                                                                     ...
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;	i -> R16,R17
;	mensajeconfig -> Y+18
;	salida -> Y+4
;	*token -> R18,R19
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00C7 gets(mensajeconfig,70);                                                                                                  ...
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00C8 token = strtok(mensajeconfig, ",");                                      //***************                               ...
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00C9 salida[0]=token;                                                         //***************                               ...
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00CA    for(i=1;i<=6;i++){                                                    //***************                               ...
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00CB          token = strtok(NULL, ",");                                      //***************  Separación de Variables      ...
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00CC          salida[i] = token;                                              //***************                               ...
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00CD    }                                                                     //***************                               ...
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00CE estado = atoi(salida[0]);                       //***************                                                        ...
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00CF rpm_max = atoi(salida[1]);                      //***************                                                        ...
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00D0 pres_max_glob = atoi(salida[2]);                //***************                                                        ...
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00D1 tiempo_ins_glob = atoi(salida[3]);              //***************  Conversiones a Entero                                 ...
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00D2 presion_PEEP = atoi(salida[4]);                 //***************                                                        ...
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00D3 tiempo_espera = atoi(salida[5]);                //***************                                                        ...
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00D4 }                                                                                                                        ...
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;//********************************************************************************************************************** ...
;void Envio_Datos (int etapa){
; 0000 00D6 void Envio_Datos (int etapa){
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00D7 printf("Et: %d Vel: %d P: %d \n ",etapa,vel,Presion);
;PCODE: $00000196 VOL: 0
;	etapa -> Y+0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00D8 delay_ms(100);}
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;
;
;//*******************************************************************************************************
;//************************************ETAPAS RESPIRATORIAS***********************************************
;//*******************************************************************************************************
;void Inspiracion (unsigned int tiempoins,unsigned int vel_max,unsigned int pres_max_func)
; 0000 00DF {
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 00E0 count3=0;
;PCODE: $000001AF VOL: 0
;	tiempoins -> Y+4
;	vel_max -> Y+2
;	pres_max_func -> Y+0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00E1 do{
;PCODE: $000001B2 VOL: 0
; 0000 00E2 PORTC.0=1;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00E3 PORTC.1=1;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00E4 PORTC.2=0;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00E5 Speed_Control(vel_max);
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00E6 presion_ins=leer_presion();
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00E7 Display_Data (vel, presion_ins, estado,1);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00E8 Envio_Datos(1);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 00E9 }while(count3 < tiempoins || presion_ins < pres_max_func );
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00EA Speed_Control(0);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00EB }
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;
;void Espiracion (unsigned int PEEP)
; 0000 00EE {
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00EF Speed_Control(0);
;PCODE: $000001DC VOL: 0
;	PEEP -> Y+0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00F0 do{
;PCODE: $000001DF VOL: 0
; 0000 00F1 PORTC.0=0;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00F2 PORTC.1=0;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00F3 PORTC.2=1;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 00F4 presion_esp=leer_presion();
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00F5 Display_Data (vel, presion_esp, estado,2);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 00F6 Envio_Datos(2);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00F7 }while (presion_esp > PEEP);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 00F8 }
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;
;void Wait (unsigned int t_esp)
; 0000 00FB {
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 00FC count3=0;
;PCODE: $000001FF VOL: 0
;	t_esp -> Y+0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 00FD Speed_Control(0);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 00FE do{
;PCODE: $00000204 VOL: 0
; 0000 00FF presion_esp=leer_presion();
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0100 PORTC.0=0;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0101 PORTC.1=0;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0102 PORTC.2=0;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0103 Display_Data (vel, presion_esp, estado,3);
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0104 Envio_Datos(3);
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0105 }while (count3 < t_esp);
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0106 }
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;//*******************************************************************************************************
;//************************************FUNCION PRINCIPAL**************************************************
;//*******************************************************************************************************
;void main(void)
; 0000 010B {
;PCODE: $00000222 VOL: 0
; 0000 010C #include <ports.h>
;PCODE: $00000223 VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
	sei
;PCODE: $0000028C VOL: 0
; 0000 010D 
; 0000 010E 
; 0000 010F while (1)
;PCODE: $0000028D VOL: 0
; 0000 0110       {/*if(estado == 1){
; 0000 0111       Inspiracion(tiempo_ins_glob,rpm_max,pres_max_glob);
; 0000 0112       Wait(tiempo_espera);
; 0000 0113       Espiracion(presion_PEEP);
; 0000 0114       Wait(tiempo_espera);
; 0000 0115       }
; 0000 0116       */
; 0000 0117       Display_Data (tiempo_ins_glob, presion_esp, estado,0);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 0118       LeerConfig();
;PCODE: $00000297 VOL: 0
; 0000 0119         do{
;PCODE: $00000298 VOL: 0
; 0000 011A       Inspiracion(tiempo_ins_glob,rpm_max,pres_max_glob);
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 011B       Wait(tiempo_espera);
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 011C       Espiracion(presion_PEEP);
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 011D       Wait(tiempo_espera);
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 011E        }while(estado == 1);
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 011F 
; 0000 0120 
; 0000 0121 
; 0000 0122 
; 0000 0123       }
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 0124 }
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
